/*
 * tonestackImpl.h
 *
 *  Created on: Apr 20, 2021
 *      Author: Sam S. AME
 */

#ifndef TONESTACKIMPL_H_
#define TONESTACKIMPL_H_

#define NUMPORTS 6

#include "wdf_utils.h"

class Tonestack : public wdfTree
{
private:
	Capacitor* Cap1;
	Capacitor* Cap2;
	Capacitor* Cap3;

	Resistor* Res1p;
	Resistor* Res1m;
	Resistor* Res2;
	Resistor* Res3p;
	Resistor* Res3m;
	Resistor* Res4;

	ResistiveVoltageSource* Vres;

	Series* S1;
	Series* S2;
	Series* S3;
	Series* S4;

	float C1;
	float C2;
	float C3;

	float R1;
	float R2;
	float R3;
	float R4;

	RootRtypeAdaptor* R;
	wdfNode** R_subtreeNodes;

public:
	Tonestack()
	{
		setSampleRate(AUDIO_SAMPLE_RATE);
		setAlpha(1.0);

		C1 = 250e-12;
		C2 = 20e-9;
		C3 = 20e-9;

		R1 = 250e3;
		R2 = 1e6;
		R3 = 25e3;
		R4 = 56e3;

		//Rtype Port A
		Vres = new ResistiveVoltageSource(1.0);
		Res3m = new Resistor(1.0);
		S1 = new Series(Vres,Res3m);

		//Port B
		Res2 = new Resistor(1.0);
		Res3p = new Resistor(1.0);
		S3 = new Series(Res2,Res3p);

		//Port C
		Res1p = new Resistor(1.0);
		Res1m = new Resistor(1.0);
		S4 = new Series(Res1p,Res1m);
		Cap1 = new Capacitor(C1,sr,alpha);
		S2 = new Series(Cap1,S4);

		//Port D
		Cap2 = new Capacitor(C2,sr,alpha);

		//Port E
		Res4 = new Resistor(R4);

		//Port F
		Cap3 = new Capacitor(C3,sr,alpha);

		R_subtreeNodes = new wdfNode*[6];
		R_subtreeNodes[0] = S1;
		R_subtreeNodes[1] = S3;
		R_subtreeNodes[2] = S2;
		R_subtreeNodes[3] = Cap2;
		R_subtreeNodes[4] = Res4;
		R_subtreeNodes[5] = Cap3;

		R = new RootRtypeAdaptor(6,R_subtreeNodes);
	}

	~Tonestack()
	{
		delete Cap1; delete Cap2; delete Cap3;
		delete Res1m; delete Res1p;
		delete Res2;
		delete Res3m; delete Res3p;
		delete Res4;
		delete S1; delete S2; delete S3; delete S4;
		delete Vres; delete R;
//		delete R_subtreeNodes;
	}

	void setSMatrixData()
	{
		float Ra = R_subtreeNodes[0]->Rp;
		float Rb = R_subtreeNodes[1]->Rp;
		double arr[6][6] = {
			{	1 - (2*Ra*(348190.833333*Rb + 362427505.6386863889))/(362427505.6386863889*Ra + 16544036047.4025763889*Rb + 348190.833333*Ra*Rb + 17093203329539.085350463), (421032094.8051527778*Ra)/(362427505.6386863889*Ra + 16544036047.4025763889*Rb + 348190.833333*Ra*Rb + 17093203329539.085350463), (2*Ra*(560000000000000.0*Rb + 586045987915763889.0))/(3624275056386863889.0*Ra + 165440360474025763889.0*Rb + 3481908333330000.0*Ra*Rb + 170932033295390853504630.0), -(2*Ra*(56000*Rb - 151911448.611))/(362427505.6386863889*Ra + 16544036047.4025763889*Rb + 348190.833333*Ra*Rb + 17093203329539.085350463), -(2*Ra*(292190.833333*Rb + 303822906.84711))/(362427505.6386863889*Ra + 16544036047.4025763889*Rb + 348190.833333*Ra*Rb + 17093203329539.085350463), -(2*Ra*(348190.833333*Rb + 151911458.23611))/(362427505.6386863889*Ra + 16544036047.4025763889*Rb + 348190.833333*Ra*Rb + 17093203329539.085350463)},
			{	(421032094.8051527778*Rb)/(362427505.6386863889*Ra + 16544036047.4025763889*Rb + 348190.833333*Ra*Rb + 17093203329539.085350463), 1 - (2*Rb*(348190.833333*Ra + 16544036047.4025763889))/(362427505.6386863889*Ra + 16544036047.4025763889*Rb + 348190.833333*Ra*Rb + 17093203329539.085350463), -(2*Rb*(520.833333*Ra + 58604598.7915763889))/(362427505.6386863889*Ra + 16544036047.4025763889*Rb + 348190.833333*Ra*Rb + 17093203329539.085350463), -(2*Rb*(347670.0*Ra + 16485431448.611))/(362427505.6386863889*Ra + 16544036047.4025763889*Rb + 348190.833333*Ra*Rb + 17093203329539.085350463), -(2*Rb*(520.833333*Ra - 151911448.611))/(362427505.6386863889*Ra + 16544036047.4025763889*Rb + 348190.833333*Ra*Rb + 17093203329539.085350463), -(2*Rb*(348190.833333*Ra + 16333520000.0))/(362427505.6386863889*Ra + 16544036047.4025763889*Rb + 348190.833333*Ra*Rb + 17093203329539.085350463)},
			{	(326670400000000000000.0*Rb + 341864066590781707009260.0)/(3624275056386863889.0*Ra + 165440360474025763889.0*Rb + 3481908333330000.0*Ra*Rb + 170932033295390853504630.0), -(583340.0*(520.833333*Ra + 58604598.7915763889))/(362427505.6386863889*Ra + 16544036047.4025763889*Rb + 348190.833333*Ra*Rb + 17093203329539.085350463), -(1.0*(2452183080555336111.0*Ra + 164268268498194236111.0*Rb + 2351491666670000.0*Ra*Rb + 170932033295390853504630.0))/(3624275056386863889.0*Ra + 165440360474025763889.0*Rb + 3481908333330000.0*Ra*Rb + 170932033295390853504630.0), (583340.0*(520.8333*Ra + 56520.8333*Rb + Ra*Rb))/(362427505.6386863889*Ra + 16544036047.4025763889*Rb + 348190.833333*Ra*Rb + 17093203329539.085350463), -(583340.0*(1041.666633*Ra + 520.8333*Rb + Ra*Rb))/(362427505.6386863889*Ra + 16544036047.4025763889*Rb + 348190.833333*Ra*Rb + 17093203329539.085350463), -(1.0*(3038229164722200000.0*Ra - 326670400000000000000.0*Rb))/(3624275056386863889.0*Ra + 165440360474025763889.0*Rb + 3481908333330000.0*Ra*Rb + 170932033295390853504630.0)},
			{	-(1.0*(583333332960000000.0*Rb - 1582410922018507009260.0))/(3624275056386863889.0*Ra + 165440360474025763889.0*Rb + 3481908333330000.0*Ra*Rb + 170932033295390853504630.0), -(1041.666666*(347670.0*Ra + 16485431448.611))/(362427505.6386863889*Ra + 16544036047.4025763889*Rb + 348190.833333*Ra*Rb + 17093203329539.085350463), (1041.666666*(520.8333*Ra + 56520.8333*Rb + Ra*Rb))/(362427505.6386863889*Ra + 16544036047.4025763889*Rb + 348190.833333*Ra*Rb + 17093203329539.085350463), -(1.0*(2712788166863889.0*Ra - 164851601794194236111.0*Rb - 3471491666670000.0*Ra*Rb + 791210851070853504630.0))/(3624275056386863889.0*Ra + 165440360474025763889.0*Rb + 3481908333330000.0*Ra*Rb + 170932033295390853504630.0), (1041.666666*(520.8333*Ra + 520.8333*Rb + Ra*Rb + 151911448.611))/(362427505.6386863889*Ra + 16544036047.4025763889*Rb + 348190.833333*Ra*Rb + 17093203329539.085350463), -(1.0*(3621562497682200000.0*Ra + 583333332960000000.0*Rb + 170140833224443200000000.0))/(3624275056386863889.0*Ra + 165440360474025763889.0*Rb + 3481908333330000.0*Ra*Rb + 170932033295390853504630.0)},
			{	-(1.0*(327253733332960000000.0*Rb + 340281655668763200000000.0))/(3624275056386863889.0*Ra + 165440360474025763889.0*Rb + 3481908333330000.0*Ra*Rb + 170932033295390853504630.0), -(1.0*(583333332960000000.0*Ra - 170140822444320000000000.0))/(3624275056386863889.0*Ra + 165440360474025763889.0*Rb + 3481908333330000.0*Ra*Rb + 170932033295390853504630.0), -(1.0*(1166666628960000000.0*Ra + 583333296000000000.0*Rb + 1120000000000000.0*Ra*Rb))/(3624275056386863889.0*Ra + 165440360474025763889.0*Rb + 3481908333330000.0*Ra*Rb + 170932033295390853504630.0), (583333296000000000.0*Ra + 583333296000000000.0*Rb + 1120000000000000.0*Ra*Rb + 170140822444320000000000.0)/(3624275056386863889.0*Ra + 165440360474025763889.0*Rb + 3481908333330000.0*Ra*Rb + 170932033295390853504630.0), (2457608427426863889.0*Ra - 162396706154934236111.0*Rb + 2361908333330000.0*Ra*Rb - 169349622373372346495370.0)/(3624275056386863889.0*Ra + 165440360474025763889.0*Rb + 3481908333330000.0*Ra*Rb + 170932033295390853504630.0), -(1.0*(583333332960000000.0*Ra + 327253733332960000000.0*Rb + 170140833224443200000000.0))/(3624275056386863889.0*Ra + 165440360474025763889.0*Rb + 3481908333330000.0*Ra*Rb + 170932033295390853504630.0)},
			{	-(1041.6666*(348190.833333*Rb + 151911458.23611))/(362427505.6386863889*Ra + 16544036047.4025763889*Rb + 348190.833333*Ra*Rb + 17093203329539.085350463), -(1041.6666*(348190.833333*Ra + 16333520000.0))/(362427505.6386863889*Ra + 16544036047.4025763889*Rb + 348190.833333*Ra*Rb + 17093203329539.085350463), -(1.0*(5425346871527778.0*Ra - 583333296000000000.0*Rb))/(3624275056386863889.0*Ra + 165440360474025763889.0*Rb + 3481908333330000.0*Ra*Rb + 170932033295390853504630.0), -(1.0*(3621562268220000000.0*Ra + 583333296000000000.0*Rb + 170140822444320000000000.0))/(3624275056386863889.0*Ra + 165440360474025763889.0*Rb + 3481908333330000.0*Ra*Rb + 170932033295390853504630.0), -(1041.6666*(520.833333*Ra + 292190.833333*Rb + 151911458.23611))/(362427505.6386863889*Ra + 16544036047.4025763889*Rb + 348190.833333*Ra*Rb + 17093203329539.085350463), 1 - (1041.6666*(348190.833333*Ra + 348190.833333*Rb + 16485431458.23611))/(362427505.6386863889*Ra + 16544036047.4025763889*Rb + 348190.833333*Ra*Rb + 17093203329539.085350463)},
		};

//		R->setSMatrixData(arr);
		for(int i = 0; i < NUMPORTS; i++)
		{
			for(int j = 0; j < NUMPORTS; j++)
			{
				R->getSMatrixData()[i][j] = static_cast<float>(arr[i][j]);
			}
		}
	}

	float processSample(float inSamp)
	{
		Vres->setVoltage(inSamp);

		R->calcIncidentWave(0.0);
		R->calcReflectedWave();

		return Res1m->getPortVoltage() + S2->getPortVoltage() + Res3m->getPortVoltage();

	}

	void setParams(float pot1, float pot2, float pot3)
	{
		Res1m->setResistance(pot1*R1);
		Res1p->setResistance((1.0-pot1)*R1);

		Res2->setResistance(pot2*R2);

		Res3m->setResistance(pot3*R3);
		Res3p->setResistance((1.0-pot3)*R3);

		setSMatrixData();
	}
};



#endif /* TONESTACKIMPL_H_ */
